<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>多线程</title>
    <url>/2018/04/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul>
<li>进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单位；</li>
<li>进程是指在系统中正在运行的一个应用程序，就是一段程序的执行过程，我们可以理解成手机里的一个App；</li>
<li>每个进程之间都是独立的，每个进程运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源；</li>
</ul>
<a id="more"></a>

<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul>
<li>程序执行流的最小单元，线程是进程中的一个实体；</li>
<li>一个进程想要执行任务，必须至少有一条线程，应用程序启动的时候，系统会默认开启一条线程，也就是主线程；</li>
</ul>
<h3 id="进程和线程的关系"><a href="#进程和线程的关系" class="headerlink" title="进程和线程的关系"></a>进程和线程的关系</h3><ul>
<li>线程是进程的执行单元，进程的所有任务都在线程中执行；</li>
<li>线程是CPU分配和调度资源的最小单位；</li>
<li>一个程序可以对应多个进程(多进程)，一个进程可以对应多个线程，但至少要有个线程；</li>
<li>同个进程内的线程共享进程资源；</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul>
<li>统一时间，CPU 只能处理一条线程，只有一条线程在执行，多线程并发执行，其实是 CPU 快速的在多条线程之间调度 (切换)，如果 CPU 调度线程时间足够快，就造成了多线程并发执行的假象；</li>
<li>如果线程非常非常多，CPU 会在 N 多线程之间调度，消耗大量的 CPU 资源， 每条线程被 调度执行的频次会降低 (线程的执行效率降低)</li>
<li>多线程的优点:<ul>
<li>能适当提高程序的执行效率</li>
<li>能适当提高资源利用率(CPU、内存利用率)</li>
</ul>
</li>
<li>多线程的缺点:<ul>
<li>开启线程需要占用一定的内存空间(默认情况下，主线程占用 1M，子线程占用 512KB)，如果开启大量的 线程，会占用大量的内存空间，降低程序的性能</li>
<li>线程越多，CPU 在调度线程上的开销就越大</li>
<li>程序设计更加复杂:比如线程之间的通信、多线程的数据共享</li>
</ul>
</li>
</ul>
<p><br><br></p>
<h2 id="任务、队列"><a href="#任务、队列" class="headerlink" title="任务、队列"></a>任务、队列</h2><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>就是执行操作的意思，也就是在线程中执行的那段代码。在 GCD 中是放在 block 中的。执行任务有两种 方式:同步执行(sync)和异步执行(async)</p>
<p><strong>同步(Sync):</strong> 同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任 务完成之后再继续执行，即会阻塞线程。只能在当前线程中执行任务(是当前线程，不一定是主线程)，不具 备开启新线程的能力。<br><strong>异步(Async):</strong> 线程会立即返回，无需等待就会继续执行下面的任务，不阻塞当前线程。可以在新的线程中 执行任务，具备开启新线程的能力(并不一定开启新线程)。如果不是添加到主队列上，异步会在子线程中执 行任务</p>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote>
<p>队列(Dispatch Queue):这里的队列指执行任务的等待队列，即用来存放任务的队列。队列是一种特殊的 线性表，采用 FIFO(先进先出)的原则，即新任务总是被插入到队列的末尾，而读取任务的时候总是从队 列的头部开始读取。每读取一个任务，则从队列中释放一个任务<br>在 GCD 中有两种队列:串行队列和并发队列。两者都符合 FIFO(先进先出)的原则。两者的主要区别是: 执行顺序不同，以及开启线程数不同</p>
</blockquote>
<br>

<ul>
<li>串行队列(SerialDispatchQueue):<br>同一时间内，队列中只能执行一个任务，只有当前的任务执行完成之后，才能执行下一个任务。(只 开启一个线程，一个任务执行完毕后，再执行下一个任务)。主队列是主线程上的一个串行队列,是系 统自动为我们创建的</li>
<li>并发队列(ConcurrentDispatchQueue):<br>同时允许多个任务并发执行。(可以开启多个线程，并且同时执行任务)。并发队列的并发功能只有 在异步(dispatch_async)函数下才有效</li>
</ul>
<p><br><br></p>
<h2 id="iOS-中的多线程"><a href="#iOS-中的多线程" class="headerlink" title="iOS 中的多线程"></a>iOS 中的多线程</h2><ul>
<li>主要有三种:NSThread、NSoperationQueue、GCD</li>
</ul>
<blockquote>
<p>是我们自己手动开辟的子线程，如果使用的是初始化方式就需要我们自己启动，如果使用的是构造器方式 它就会自动启动。只要是我们手动开辟的线程，都需要我们自己管理该线程，不只是启动，还有该线程使 用完毕后的资源回收</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(testThread:) object:<span class="string">@"我是参数"</span> ];</span><br><span class="line"><span class="comment">// 当使用初始化方法初始出来的线程需要start启动</span></span><br><span class="line">[thread start];</span><br><span class="line"><span class="comment">// 可以为开辟的子线程起名字</span></span><br><span class="line">thread.name = <span class="string">@"NSTread线程"</span>;</span><br><span class="line"><span class="comment">//调整Thread的权限，线程权限范围0 - 1 ,越大权限越高，先执行的概率就会越高，由于是概率，所以并不能很准确的实现我们想要的执行顺序</span></span><br><span class="line">thread.threadPriority = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过构造器开辟子线程</span></span><br><span class="line">[<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(testThread:) toTarget:<span class="keyword">self</span> withObject:<span class="string">@"构造器方式"</span>];</span><br></pre></td></tr></table></figure>
<br>

<p>performSelector…只要是 NSObject 的子类或者对象都可以通过调用方法进入子线程和主线程，其实这些方法 所开辟的子线程也是 NSThread 的另一种体现方式。 在编译阶段并不会去检查方法是否有效存在，如果不存在只会给出警告；</p>
<h3 id="GCD-对比-NSOperationQueue"><a href="#GCD-对比-NSOperationQueue" class="headerlink" title="GCD 对比 NSOperationQueue"></a>GCD 对比 NSOperationQueue</h3><p>我们要明确 <code>NSOperationQueue</code> 与 <code>GCD</code> 之间的关系<br><code>GCD</code> 是面向底层的C语言的 <code>API</code>， <code>NSOperationQueue</code> 是用 <code>GCD</code> 构建封装的， 是 <code>GCD</code> 的高级抽象。</p>
<ul>
<li><code>GCD</code> 执行效率更高，而且由于队列中执行的是由 <code>block</code> 构成的任务，这是一个轻量级的数据结构，写起来更方便</li>
<li><code>GCD</code> 只支持 <code>FIFO</code> （先进先出）的队列， 而 <code>NSOperationQueue</code> 可以通过设置最大并发数，设置优先级，添加依赖关系等调整执行顺序；</li>
<li><code>NSOperationQueue</code> 甚至可以跨队列设置依赖关系， 但是 <code>GCD</code> 只能通过设置串行队列，或者在队列内添加 <code>barrier</code> (<code>dispatch_barrier_async</code>) 任务， 才能控制执行顺序，较为复杂</li>
<li><code>NSOperationQueue</code> 因为面向对象，所以支持 <code>KVO</code>, 可以检测 <code>Operation</code> 是否正在执行 （isExecuted）、 是否结束 (isFinished) 、 是否取消 (isCanceld);</li>
</ul>
<blockquote>
<p>实际项目开发中，很多时候只会用到异步操作，不会有特别复杂的线程关系管理，所以苹果推崇且优化完善，运行快速的 <code>GCD</code> 作为首选；<br>如果考虑异步操作之间的事务性，顺序性，依赖关系，比如多线程并发下载，GCD 需要自己写更多的代码来实现， 而 <code>NSOperationQueue</code> 已经内建了这些支持<br>无论是 <code>GCD</code> 还是 <code>NSOperationQueue</code> ，我们接触的都是任务和队列，没有直接接触到线程，事实上线程管理也的确不需要我们操心，系统对于线程的创建，调度管理和释放都做的很好。而 <code>NSThread</code> 需要我们自己去管理线程的生命周期，还需要考虑线程同步，加锁问题，造成一些性能上的开销</p>
</blockquote>
<h3 id="GCD-–-队列"><a href="#GCD-–-队列" class="headerlink" title="GCD – 队列"></a>GCD – 队列</h3><br>

<p>iOS 中有 <code>GCD</code> 、 <code>NSOperationQueue</code> 、 <code>NSThread</code> 等多线程技术方案<br>而 <code>GCD</code> 共有三种队列类型:</p>
<ul>
<li>main queue: 通过 dispatch_get_main_queue()获得，这是一个与主线程祥光的串行队列。</li>
<li>global queue: 全局队列，是并发队列，由整个进程共享。存在着高、中、低三种优先级的全局队列，调用 <code>dispatch_get_global_queue</code> 并传入优先级来访问队列</li>
<li>自定义队列： 通过函数 <code>dispatch_queue_create</code> 穿件的队列</li>
</ul>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>概念： 死锁就是队列引起的循环等待</p>
<p>1、 一个比较常见的死锁例子： 主队列同步操作</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"deadlock"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主线程中运用主队列同步，也就是把任务放到了主线程的队列中。 同步对于任务是立刻执行的，那么当把任务放进主队列时，它就会立马执行,只有执行完这个任务， viewDidLoad 才会继续向下执行。<br>而 viewDidLoad 和任务都是在主队列上的，由于队列的先进先出原则，任务又需等待 viewDidLoad 执行完毕 后才能继续执行，viewDidLoad 和这个任务就形成了相互循环等待，就造成了死锁。 想避免这种死锁，可以将同步改成异步 dispatch_async,或者将 dispatch_get_main_queue 换成其他串行或并行 队列，都可以解决。</p>
<p>2、同样下面的代码也会造成死锁:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"test"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dispatch_async</span>(serialQueue, ^&#123;</span><br><span class="line">      <span class="built_in">dispatch_sync</span>(serialQueue, ^&#123;</span><br><span class="line">          <span class="built_in">NSLog</span>(<span class="string">@"deadlock"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>外面的函数无论是同步还是异步都会造成死锁。<br>这是因为里面的任务和外面的任务都在同一个 serialQueue 队列内，又是同步，这就和上边主队列同步的例 子一样造成了死锁<br>解决方法也和上边一样，将里面的同步改成异步 dispatch_async,或者将 serialQueue 换成其他串行或并行队 列，都可以解决</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"test"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">dispatch_queue_t</span> serialQueue2 = dispatch_queue_create(<span class="string">"test"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">dispatch_async</span>(serialQueue, ^&#123;</span><br><span class="line">       <span class="built_in">dispatch_sync</span>(serialQueue2, ^&#123;</span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"deadlock"</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<p>这样是不会死锁的,并且 serialQueue 和 serialQueue2 是在同一个线程中的。</p>
<h3 id="GCD-任务执行顺序"><a href="#GCD-任务执行顺序" class="headerlink" title="GCD 任务执行顺序"></a>GCD 任务执行顺序</h3><ul>
<li><strong>串行队列先异步后同步</strong></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"test"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(serialQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"3"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(serialQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"4"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"5"</span>);</span><br></pre></td></tr></table></figure>

<p>打印顺序是 13245</p>
<p>首先先打印 1<br>接下来将任务 2 其添加至串行队列上，由于任务 2 是异步，不会阻塞线程，继续向下执行，打印 3 然后是任务 4,将任务 4 添加至串行队列上，因为任务 4 和任务 2 在同一串行队列，根据队列先进先出原则， 任务 4 必须等任务 2 执行后才能执行，又因为任务 4 是同步任务，会阻塞线程，只有执行完任务 4 才能继 续向下执行打印 5<br>所以最终顺序就是 13245。<br>这里的任务 4 在主线程中执行，而任务 2 在子线程中执行。<br>如果任务 4 是添加到另一个串行队列或者并行队列，则任务 2 和任务 4 无序执行(可以添加多个任务看效果)</p>
<p>如果 GCD 里添加  performSelector 会怎么样呢？</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(test:) withObject:<span class="keyword">self</span> afterDelay:<span class="number">1</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里的 test 方法是不会去执行的，原因在于 <code>- (void)performSelector: (SEL)aSelector withObject: (nullable id)anArgument afterDelay: (NSTimeInterval)delay；</code><br>这个方法要提交任务到runloop上的，然 GCD 地城创建的线程，默认是没有开启对应的runloop的，所以这个方法会失效;<br>而如果将 dispatch_get_global_queue 改成主队列，由于主队列所在的主线程是默认开启了 runloop 的，就会 去执行(将 dispatch_async 改成同步，因为同步是在当前线程执行，那么如果当前线程是主线程，test 方法也 是会去执行的)。</p>
<ul>
<li><strong>dispatch_barrier（栅栏函数)</strong><ul>
<li>dispatch_barrier_sync:Submitsabarrierblockobjectforexecutionandwaitsuntilthatblockcompletes.(提交 一个栅栏函数在执行中,它会等待栅栏函数执行完)</li>
<li>dispatch_barrier_async:Submitsabarrierblockforasynchronousexecutionandreturnsimmediately.(提交一 个栅栏函数在异步执行中,它会立马返回)</li>
<li>dispatch_barrier_sync 和 dispatch_barrier_async 的区别也就在于会不会阻塞当前线程</li>
</ul>
</li>
</ul>
<p>实现多读单写：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)readDataForKey: (<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    __block <span class="keyword">id</span> result;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(_serial, ^&#123;</span><br><span class="line">        result = [<span class="keyword">self</span> valueForKey:key];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)writeData: (<span class="keyword">id</span>)data forKey: (<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    dispatch_barrier_async(_serial, ^&#123;</span><br><span class="line">        [<span class="keyword">self</span> setValue:data forKey:key];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>dispatch_group_async</strong><br>使用场景： 在 n 个耗时并发任务都完成后，再执行接下来的任务。比如，在 n 个网络请求完成后去刷新UI</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</span><br><span class="line">        <span class="comment">// 模拟网络请求</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"网络请求,%zd"</span>,i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟主线程刷新UI</span></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"主线程刷新UI"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>dispatch_semaphore (信号量)</strong><br>GCD 中的信号量是指 Dispatch Semaphore，是持有计数的信号。<br>Dispatch Semaphore 提供三个函数：</li>
<li>dispatch_semaphore_create: 创建一个Semaphore 并初始化信号的总量；</li>
<li>dispatch_semaphore_signal: 发送一个信号，让信号总量 + 1；</li>
<li>dispatch_semaphore_wait: 可以使总信号量 -1， 单信号总量为0 时就会一直等待</li>
</ul>
<p>Dispatch Semaphore 在实际开发中主要用于：</p>
<ul>
<li>保持线程同步，将异步执行任务转换为同步执行任务</li>
<li>保证线程安全，为线程加锁</li>
</ul>
<p>1、 保证线程同步:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">  __block <span class="built_in">NSInteger</span> number = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">      number = <span class="number">100</span>;</span><br><span class="line">      <span class="comment">// 发送信号，让信号总量 + 1</span></span><br><span class="line">      dispatch_semaphore_signal(semaphore);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 信号量 = 0 的时候 会一直等待</span></span><br><span class="line">  dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"semaphore --- end, number = %zd"</span>, number);</span><br></pre></td></tr></table></figure>
<p>dispatch_semaphore_wait 加锁阻塞了当前线程，dispatch_semaphore_signal 解锁后当前线程继续执行</p>
<p>2、 保证线程安全，为线程加锁<br>在线程安全中可以将 dispatch_semaphore_wait 看作加锁，而 dispatch_semaphore_signal 看作解锁 首先创建全局变量</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">_semaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p><font color = red> 注意到这里的初始化信号量是 1。 </font></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)asyncTask &#123;</span><br><span class="line">    dispatch_semaphore_wait(_semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"执行任务:%zd"</span>m count);</span><br><span class="line"></span><br><span class="line">    dispatch_semaphore_signal(_semaphore);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异步并发调用 asyncTask</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">   <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>,<span class="number">0</span>), ^&#123;</span><br><span class="line">       [<span class="keyword">self</span> asyncTask];</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印任务是从1  顺序执行到100, 没有发生两个任务同时执行的情况</p>
<p>原因如下：</p>
<blockquote>
<p>在子线程中并发执行 asyncTask，那么第一个添加到并发队列里的，会将信号量减 1，此时信号量等于 0， 可以执行接下来的任务。而并发队列中其他任务，由于此时信号量不等于 0，必须等当前正在执行的任务 执行完毕后调用 dispatch_semaphore_signal 将信号量加 1，才可以继续执行接下来的任务，以此类推， 从而达到线程加锁的目的。</p>
</blockquote>
<ul>
<li>延时函数 （dispatch_after）</li>
</ul>
<p>dispatch_after 能让我们添加进队列的任务延时执行，该行数并不是指在指定时间后执行处理，而只是在指定时间追加处理到 dispatch_queue</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数是time， 第二个参数是 dispatch_queue, 第三个参数是要执行的block</span></span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^ &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dispatch_after"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>由于其内部使用的是 dispatch_time_t 管理时间，而不是 NSTimer.<br>所以如果在子线程中调用，相比 performSelector: afterDelay, 不用关系 runloop 是否开启</p>
<ul>
<li>使用 dispatch_once 实现单例</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)shareInstance &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">id</span> instance = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceTaken, ^&#123;</span><br><span class="line">        instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NSOperationQueue-的优缺点"><a href="#NSOperationQueue-的优缺点" class="headerlink" title="NSOperationQueue 的优缺点"></a>NSOperationQueue 的优缺点</h3><p><code>NSOperation</code>、<code>NSOperationQueue</code> 是苹果提供给我们的一套多线程解决方案。实际上 <code>NSOperation</code>、 <code>NSOperationQueue</code> 是基于 <code>GCD</code> 更高一层的封装，完全面向对象。但是比 <code>GCD</code> 更简单易用、代码可读 性也更高。</p>
<p>1、可以添加任务依赖，方便控制执行顺序;</p>
<p>2、 可以设定操作执行的优先级;</p>
<p>3、 任务执行状态控制: <code>isReady</code>, <code>isExecuting</code>, <code>isFinished</code>, <code>isCancelled</code>;</p>
<p>如果只是重写 <code>NSOperation</code> 的 <code>main</code> 方法， 由底层控制变更执行任务及完成状态，以及任务退出如果重写了 <code>NSOperation</code> 的 <code>start</code> 方法， 自行控制任务状态<br>系统通过 KVO 的方式一处 <code>isFinished == YES</code> 的 <code>NSOperation</code></p>
<p>4、 可以设置最大并发量</p>
<h3 id="NSOperation-和-NSOperationQueue"><a href="#NSOperation-和-NSOperationQueue" class="headerlink" title="NSOperation 和 NSOperationQueue"></a>NSOperation 和 NSOperationQueue</h3><ul>
<li><p><strong>操作 (Operation):</strong></p>
<p>  执行操作的意思，换句话说就是你在线程中执行的那段代码。<br>  在 GCD 中是放在 block 中的。在 NSOperation 中，使用 <code>NSOperation</code> 子类 <code>NSInvocationOperation</code>、 <code>NSBlockOperation</code>，或者自定义子类来封装操作。</p>
</li>
<li><p><strong>操作队列 (Operation Queues)</strong></p>
<p>这里的队列指操作队列，即用来存放操作的队列。不同于 GCD 中的调度队列 FIFO(先进先出)的原则。 <code>NSOperationQueue</code> 对于添加到队列中的操作，首先进入准备就绪的状态(就绪状态取决于操作之间的依 赖关系)，然后进入就绪状态的操作的开始执行顺序(非结束执行顺序)由操作之间相对的优先级决定(优 先级是操作对象自身的属性)。</p>
<p>操作队列通过设置最大并发操作数( <code>maxConcurrentOperationCount</code> )来控制并发、串行。 <code>NSOperationQueue</code> 为我们提供了两种不同类型的队列:主队列和自定义队列。主队列运行在主线程之上，<br>而自定义队列在后台执行。</p>
</li>
</ul>
<h3 id="常驻线程的实现"><a href="#常驻线程的实现" class="headerlink" title="常驻线程的实现"></a>常驻线程的实现</h3><p>NSThread 在实际开发中比较常用到的场景就是去实现常驻线程。 本质是开启 RunLoop 监听，实现线程常驻</p>
<ul>
<li>由于每次开辟子线程都会消耗CPU， 在需要频繁使用子线程的情况下，频繁开辟子线程会消耗大量的CPU，而且创建线程都是任务执行完成后也就释放了，不能再次利用，那么如何创建一个线程可以让它可以再次工作呢？ 也就是创建一个常驻线程。</li>
</ul>
<p>首先常驻线程既然是常驻，那么我们可以用 GCD 实现一个单例来保存 NSThread</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSThread</span> *) shareInstance &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSThread</span> * shareInstance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> oncePredicate;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;oncePredicate, ^&#123;</span><br><span class="line">        shareThread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector: <span class="keyword">@selector</span>(threadTest) object: <span class="literal">nil</span>];</span><br><span class="line">        [shareThread setName: <span class="string">@"threadTest"</span>];</span><br><span class="line">        [shareThread start];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)threadTest &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSRunLoop</span> *runLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">        [runLoop addPort: [<span class="built_in">NSMachPort</span> port] forMode: <span class="built_in">NSDefaultRunLoopMode</span>]; <span class="comment">// 给RunLoop 添加监听端口</span></span><br><span class="line">        [runLoop run]; <span class="comment">// 启动RunLoop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> performSelector: <span class="keyword">@selector</span>(test) onThread: [ViewController shareThread] withObject: <span class="literal">nil</span> waitUntilDone: <span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"test:%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>CocoaPads 私有库</title>
    <url>/2018/06/28/CocoaPads-%E7%A7%81%E6%9C%89%E5%BA%93/</url>
    <content><![CDATA[<h3 id="私有库创建步骤"><a href="#私有库创建步骤" class="headerlink" title="私有库创建步骤"></a>私有库创建步骤</h3><h5 id="1-建立自己的-Git-仓库，作为自己的索引库，将索引库添加到-pod-repo-中"><a href="#1-建立自己的-Git-仓库，作为自己的索引库，将索引库添加到-pod-repo-中" class="headerlink" title="1. 建立自己的 Git 仓库，作为自己的索引库，将索引库添加到 pod repo 中"></a>1. 建立自己的 Git 仓库，作为自己的索引库，将索引库添加到 pod repo 中</h5><p>这里以自己的服务器部署 Gitlab 作为私有库管理。Gitlab 部署<br><a href="https://ken.io/note/centos7-gitlab-install-tutorial" target="_blank" rel="noopener">Gitlab CentOS 部署</a><br><a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-12.0.1-ce.0.el7.x86_64.rpm" target="_blank" rel="noopener">GitLab 安装包官网地址</a><br>Gitlab 部署完毕后，创建类似 Github 的索引仓库，这里命名 gitlab-specs</p>
<a id="more"></a>

<p>将 gitlab 上的索引库 添加到本地</p>
<blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod repo add [索引库在本地的名字] [索引库在远程服务器的地址]</span><br><span class="line"><span class="comment"># 这里用gitlab-specs本地名字为例</span></span><br><span class="line">pod repo add gitlab-specs <span class="symbol">http:</span>/<span class="regexp">/samchiang.com/samchiang</span><span class="regexp">/gitlabSpecs.git</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这样可以再 ~/.cocoapods/repos 目录下看到 gitlab-specs 仓库</p>
<hr>
<h5 id="2-创建-Pod-项目"><a href="#2-创建-Pod-项目" class="headerlink" title="2. 创建 Pod 项目"></a>2. 创建 Pod 项目</h5><p>用下面的命令创建 pod 项目，这里创建个 Util 组件库</p>
<blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod lib create 【pod库的项目名称】</span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">pod lib create SCUtil</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h5 id="3-修改-Pod-项目"><a href="#3-修改-Pod-项目" class="headerlink" title="3. 修改 Pod 项目"></a>3. 修改 Pod 项目</h5><p>可以用 Exmaple 编写的 pod 库，编写完成后进入第 4 步</p>
<hr>
<h5 id="4-修改-podspec-文件，并验证"><a href="#4-修改-podspec-文件，并验证" class="headerlink" title="4. 修改*.podspec 文件，并验证"></a>4. 修改*.podspec 文件，并验证</h5><ul>
<li><h4 id="如何编写你的-podspec"><a href="#如何编写你的-podspec" class="headerlink" title="如何编写你的.podspec"></a>如何编写你的.podspec</h4><p>一些常用信息介绍</p>
<blockquote>
<p>name：框架名<br>version：当前版本（注意，是当前版本，假如你后续更新了新版本，需要修改此处）<br>summary：简要描述，在 pod search ZCPKit 的时候会显示该信息。<br>description：详细描述<br>homepage：页面链接<br>license：开源协议<br>author：作者<br>source：源码 git 地址<br>platform：支持最低 ios 版本<br>source_files：源文件（可以包含.h 和.m）<br>public_header_files：头文件(.h 文件)<br>resources：资源文件（配置的文件都会被放到 mainBundle 中）<br>resource_bundles：资源文件（配置的文件会放到你自己指定的 bundle 中）<br>frameworks：依赖的系统框架<br>vendored_frameworks：依赖的非系统框架<br>libraries：依赖的系统库<br>vendored_libraries：依赖的非系统的静态库<br>dependency：依赖的三方库</p>
</blockquote>
</li>
<li><h4 id="如何实现目录分层"><a href="#如何实现目录分层" class="headerlink" title="如何实现目录分层"></a>如何实现目录分层</h4><p><img src="https://sam-chiang-blog.oss-cn-beijing.aliyuncs.com/WeChat5e07f88b10d442daffce258ac9f8ec8e.png" alt="53082e9beb54d5ec64abacc21f5502c6.png"></p>
</li>
</ul>
<p>Pod 目录结构</p>
<blockquote>
<p>SCUtil</p>
</blockquote>
<pre><code>|____ ValidUtil
|____ CropUtil</code></pre><blockquote>
</blockquote>
<p>使用 subspec</p>
<blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">=========== subspecs 配置  ===========</span><br><span class="line">s.subspece <span class="string">'validUtil'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">     <span class="comment">#目录为文件根目录下第一路由</span></span><br><span class="line">     ss.source_files = <span class="string">'ValidUtil/*'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">s.subspec <span class="string">'CropUtil'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">   ss.source_files = <span class="string">'CropUtil/*'</span></span><br><span class="line">   <span class="comment">#如果有依赖项添加依赖项,这里假设 CropUtil依赖 ValidUtil</span></span><br><span class="line">   ss.dependency <span class="string">'SCUtil/ValidUtil'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>其他依赖项和主项目的配置方式是一致的</p>
<p><a href="https://segmentfault.com/a/1190000012269307" target="_blank" rel="noopener">参考 podspec 配置文章</a><br><a href="http://www.mengyueping.com/2018/08/16/iOS_CocoaPods_03/" target="_blank" rel="noopener">参考 podspec 可能错误的文章</a></p>
<ul>
<li><h4 id="验证-podspec-编写是否无误"><a href="#验证-podspec-编写是否无误" class="headerlink" title="验证 podspec 编写是否无误"></a>验证 podspec 编写是否无误</h4></li>
</ul>
<blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod lib lint</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h5 id="5-建立-pod-Git-库，将-Pod-项目代码提交，并添加标签"><a href="#5-建立-pod-Git-库，将-Pod-项目代码提交，并添加标签" class="headerlink" title="5. 建立 pod Git 库，将 Pod 项目代码提交，并添加标签"></a>5. 建立 pod Git 库，将 Pod 项目代码提交，并添加标签</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"提交版本描述"</span></span><br><span class="line">git remote add origin 项目仓库地址 <span class="comment"># 注意，这不是Spec Repo私有库的仓库地址！！是pod 私有库的远程地址</span></span><br><span class="line">git push origin master</span><br><span class="line">git tag -m <span class="string">"标签描述"</span> 标签名</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>

<h5 id="6-将-pod-库-索引添加到自己的索引库"><a href="#6-将-pod-库-索引添加到自己的索引库" class="headerlink" title="6. 将 pod 库 索引添加到自己的索引库"></a>6. 将 pod 库 索引添加到自己的索引库</h5><p>这里 本地索引库以 gitlab-specs 为例 ,自己的 pod 私有库以 SCUtil 为例</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">pod repo push gitlab-specs <span class="module-access"><span class="module"><span class="identifier">SCUtil</span>.</span></span>podspec</span><br></pre></td></tr></table></figure>

<h5 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>创建自己的项目，添加podfile</span><br><span class="line">pod init</span><br><span class="line"><span class="regexp">//</span>或者cd到自己pod私有库文件地址，用vim编写也可以 vim podfile</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>添加Pod私有索引库</span><br><span class="line">source http:<span class="regexp">//</span>samchiang.com<span class="regexp">/samchiang/gi</span>tlabSpecs.git <span class="regexp">//</span>索引库地址</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>添加自己的私有库</span><br><span class="line">pod <span class="string">'SCUtil'</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>最后执行pod install</span><br><span class="line">pod install</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 逆向工具 class-dump</title>
    <url>/2020/05/08/Mach-O-class-dump/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>class-dump 是一个工具，它利用了 Objective-C 语言的运行时特性，将存储在 Mach-O 文件中的头文件信息提取出来，并生成对应的 .h 文件。</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以在其<a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="noopener">class-dump 官网</a>下载，将里面的 class-dump 直接放在/usr/local/bin 目录，并给个可执行权限即可 如果/usr/local/bin 没有添加到 PATH,请自行添加</p>
<h2 id="如何使用-class-dump"><a href="#如何使用-class-dump" class="headerlink" title="如何使用 class-dump"></a>如何使用 class-dump</h2><p><code>class-dump -H Mach-O 文件路径 -o 头文件存放目录</code></p>
<h2 id="Mach-O-文件"><a href="#Mach-O-文件" class="headerlink" title="Mach-O 文件"></a>Mach-O 文件</h2><p><code>Mach-O</code> 其实是 <code>Mach Object</code> 文件格式的缩写，是 <code>mac</code> 以及 <code>iOS</code> 上可执行文件的格式， 类似于 <code>windows</code> 上的 <code>PE</code> 格式 ( <code>Portable Executable</code> ) , <code>linux</code> 上的 <code>elf</code> 格式 ( <code>Executable and Linking Format</code> ) .<br>它是一种用于可执行文件、目标代码、动态库的文件格式。作为 <code>a.out</code> 格式的替代，<code>Mach-O</code> 提供了更强的扩展性。<br>但是除了可执行文件外 , 其实还有一些文件也是使用的 <code>Mach-O</code> 的文件格式 .<br>属于 <code>Mach-O</code> 格式的常见文件</p>
<blockquote>
<ul>
<li>目标文件 .o</li>
<li>库文件<ul>
<li>.a</li>
<li>.dylib</li>
<li>Framework</li>
</ul>
</li>
<li>可执行文件<br>dyld ( 动态链接器 )<br>.dsym ( 符号表 )</li>
</ul>
</blockquote>
<p>也就是说 <code>Mach-O</code> 并非一定是可执行文件 , 它是一种文件格式 , 分为 <code>Mach-O Object</code> 目标文件 、<code>Mach-O ececutable</code>可执行文件、 <code>Mach-O dynamically</code> 动态库文件、 <code>Mach-O dynamic linker</code> 动态链接器文件、 <code>Mach-O dSYM companion</code> 符号表文件 , 等等 .</p>
]]></content>
      <categories>
        <category>hook</category>
      </categories>
      <tags>
        <tag>class-dump、hook</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 开发之 Runtime(一) -- Runtime 环境搭建</title>
    <url>/2020/05/15/iOS%20%E5%BC%80%E5%8F%91%E4%B9%8B%20Runtime(%E4%B8%80)%20--%20Runtime%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="什么是Runtime"><a href="#什么是Runtime" class="headerlink" title="什么是Runtime?"></a>什么是Runtime?</h2><p>Runtime 是由 C、 C++、 汇编共共同组成的 为 iOS 提供运行时功能的一套 API, 其中最主要的就是消息机制。<br>可以查看苹果的官网 <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048" target="_blank" rel="noopener">Objective-C Runtime Programming Guide</a></p>
<h3 id="运行时释义"><a href="#运行时释义" class="headerlink" title="运行时释义"></a>运行时释义</h3><ul>
<li>对比 C，C 语言在函数编译阶段会决定调用哪个函数，Rumtime 是在运行时根据函数的名称查找需要调用的哪个函数。</li>
</ul>
<a id="more"></a>

<p>简单举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void sayHello() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class="line">#import &quot;SCPerson.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">        sayHello();</span><br><span class="line">        SCPerson *person &#x3D; [[SCPerson alloc] init];</span><br><span class="line">        [person sayHello];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 SCPerson.m 中 没有实现 <code>sayHello</code>, 在编译时，这个并不会报错，但是在运行时，会因为找不到 <code>sayHello</code> 发放报错.</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS底层原理</category>
      </categories>
      <tags>
        <tag>runtime</tag>
      </tags>
  </entry>
  <entry>
    <title>homebrew安装及相关问题解决</title>
    <url>/2019/07/15/homebrew-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="什么是Homebrew"><a href="#什么是Homebrew" class="headerlink" title="什么是Homebrew"></a>什么是Homebrew</h3><p>Homebrew 是 Mac OS 的一种包管理工具，相当于 Redhat Linux(Centos/RHEL/Fedora) 的 <code>yum</code> 或者 Debian Linux(Debian/Ubuntu) 的 <code>apt-get</code>。 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew 的官网</a></p>
<h3 id="Homebrew-安装"><a href="#Homebrew-安装" class="headerlink" title="Homebrew 安装"></a>Homebrew 安装</h3><p>使用官方提供的方法安装 Homebrew</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="使用-brew-install-出现长时间卡顿怎么办？"><a href="#使用-brew-install-出现长时间卡顿怎么办？" class="headerlink" title="使用 brew install 出现长时间卡顿怎么办？"></a>使用 brew install 出现长时间卡顿怎么办？</h3><p>在国内的网络环境下使用 Homebrew 安装软件的过程中可能会出现长时间的卡在 Updating Homebrew 这个步骤上。<br>例如： 执行 brew install composer</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">➜  ~ brew install composer</span><br><span class="line">Updating Homebrew... <span class="comment"># 如果碰到长时间卡在这里，参考以下 2 种处理方法</span></span><br></pre></td></tr></table></figure>

<p><strong>方法一: 按住 control + c  取消本次更新操作</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">➜  ~ brew install composer</span><br><span class="line">Updating Homebrew...</span><br><span class="line">^C</span><br></pre></td></tr></table></figure>

<p>按住 control + c 之后命令会显示 ^C, 就表示已经取消 <code>Updating Homebrew</code> 操作，跳过这个步骤去执行我们真正需要的安装操作</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">➜  ~ brew install composer</span><br><span class="line">Updating Homebrew...</span><br><span class="line">^C==&gt; Satisfying dependencies</span><br><span class="line">==&gt; Downloading <span class="symbol">https:</span>/<span class="regexp">/getcomposer.org/download</span><span class="regexp">/1.7.2/composer</span>.phar</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><font color=red>PS: 这个办法是临时性的解决方案</font></p>
<p><strong>方法二： 使用 Alibaba 的 Homebrew 镜像进行加速</strong></p>
<p>平时我们执行 <code>brew</code> 命令安装软件的时候，跟一下3个仓库有关：</p>
<ul>
<li>brew.git</li>
<li>homoebrew-core.git</li>
<li>homebrew-bottles.git</li>
</ul>
<p>通过更改这 3 个仓库的地址为 Alibaba 提供的地址</p>
<h4 id="替换-还原-brew-git-仓库地址"><a href="#替换-还原-brew-git-仓库地址" class="headerlink" title="替换/还原 brew.git 仓库地址"></a>替换/还原 brew.git 仓库地址</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换成阿里巴巴的 brew.git 仓库地址:</span></span><br><span class="line">cd <span class="string">"$(brew --repo)"</span></span><br><span class="line">git remote set-url origin <span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/homebrew</span><span class="regexp">/brew.git</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#=======================================================</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># 还原为官方提供的 brew.git 仓库地址</span></span><br><span class="line"><span class="regexp">cd "$(brew --repo)"</span></span><br><span class="line"><span class="regexp">git remote set-url origin https:/</span><span class="regexp">/github.com/</span>Homebrew/brew.git</span><br></pre></td></tr></table></figure>

<h4 id="替换-还原-homebrew-core-git-仓库地址"><a href="#替换-还原-homebrew-core-git-仓库地址" class="headerlink" title="替换 / 还原 homebrew-core.git 仓库地址"></a>替换 / 还原 homebrew-core.git 仓库地址</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换成阿里巴巴的 homebrew-core.git 仓库地址:</span></span><br><span class="line">cd <span class="string">"$(brew --repo)/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote set-url origin <span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/homebrew</span><span class="regexp">/homebrew-core.git</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">#=======================================================</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># 还原为官方提供的 homebrew-core.git 仓库地址</span></span><br><span class="line"><span class="regexp">cd "$(brew --repo)/</span>Library/Taps/homebrew/homebrew-core<span class="string">"</span></span><br><span class="line"><span class="string">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span></span><br></pre></td></tr></table></figure>

<h3 id="替换-还原-homebrew-bottles-访问地址"><a href="#替换-还原-homebrew-bottles-访问地址" class="headerlink" title="替换 / 还原 homebrew-bottles 访问地址"></a>替换 / 还原 homebrew-bottles 访问地址</h3><p>这个跟你的 macOS 系统使用的 shell 版本有关系<br>所以，先来查看当前使用 shell 版本</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你的输出结果是 /bin/zsh，参考下方的 zsh 终端操作方式</span></span><br><span class="line"><span class="comment"># 如果你的输出结果是 /bin/bash，参考下方的 bash 终端操作方式</span></span><br></pre></td></tr></table></figure>

<p><strong>zsh 终端操作方式</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换成阿里巴巴的 homebrew-bottles 访问地址:</span></span><br><span class="line">echo <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~<span class="regexp">/.zshrc</span></span><br><span class="line"><span class="regexp">source ~/</span>.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原为官方提供的 homebrew-bottles 访问地址</span></span><br><span class="line">vi ~<span class="regexp">/.zshrc</span></span><br><span class="line"><span class="regexp"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class="line"><span class="regexp">source ~/</span>.zshrc</span><br></pre></td></tr></table></figure>

<p><strong>bash 终端操作方式</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换 homebrew-bottles 访问 URL:</span></span><br><span class="line">echo <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> &gt;&gt; ~<span class="regexp">/.bash_profile</span></span><br><span class="line"><span class="regexp">source ~/</span>.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#=======================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原为官方提供的 homebrew-bottles 访问地址</span></span><br><span class="line">vi ~<span class="regexp">/.bash_profile</span></span><br><span class="line"><span class="regexp"># 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span></span><br><span class="line"><span class="regexp">source ~/</span>.bash_profile</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>homebrew</tag>
      </tags>
  </entry>
</search>
